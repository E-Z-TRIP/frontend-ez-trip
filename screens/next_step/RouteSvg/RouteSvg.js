import { View } from 'react-native';
import Svg, { Path, Circle } from 'react-native-svg';
import { useRef, useEffect, useState } from 'react';
import { inspect } from '../../../lib/inspector';
import styles from './style.css';

export default function RouteSvg({
  pathColor = 'white',
  pointerColor = 'white',
  pointerScale = 1,
  pointerStyle = {},
  progressInPercent = 50,
  ...props
}) {
  const routeRef = useRef();
  const [pointerPosition, setPointerPosition] = useState({ x: 0, y: 0 });

  const getNewPointerPositionOnPath = (point) => {
    const { height, width } = routeRef.current.getBBox({ fill: true });
    return routeRef.current.getPointAtLength(1);
  };

  useEffect(() => {
    // console.log(getNewPointerPositionOnPath(progressInPercent));
    inspect(routeRef.current.getBBox({ fill: true }));
    setPointerPosition(getNewPointerPositionOnPath(progressInPercent));
  }, [progressInPercent]);

  return (
    <>
      {/* <Svg xmlns='http://www.w3.org/2000/svg' width={169} height={470} viewBox='0 0 169 517' {...props}>
        <Path
          ref={(ref) => (routeRef.current = ref)}
          d='M110.078 501C110.078 509.837 117.241 517 126.078 517C134.914 517 142.078 509.837 142.078 501C142.078 492.163 134.914 485 126.078 485C117.241 485 110.078 492.163 110.078 501ZM131.281 395.5L129.87 398.148L131.281 395.5ZM79.5 331.5L81.3844 333.834L79.5 331.5ZM104.196 258.5L101.93 256.534L104.196 258.5ZM22 116L19.0417 116.499L22 116ZM0.66748 16C0.66748 24.8366 7.83092 32 16.6675 32C25.504 32 32.6675 24.8366 32.6675 16C32.6675 7.16344 25.504 0 16.6675 0C7.83092 0 0.66748 7.16344 0.66748 16ZM128.616 499.4C123.808 491.774 121.879 485.489 121.734 480.244C121.59 475.044 123.193 470.6 125.939 466.595C128.719 462.54 132.667 458.943 137.173 455.56C141.698 452.163 146.558 449.142 151.216 446.066C155.769 443.06 160.182 439.969 163.335 436.6C166.521 433.195 168.783 429.112 168.199 424.216C167.634 419.469 164.476 414.765 158.884 409.823C153.243 404.838 144.74 399.272 132.691 392.852L129.87 398.148C141.751 404.478 149.782 409.787 154.911 414.319C160.088 418.895 161.935 422.352 162.241 424.925C162.53 427.349 161.53 429.747 158.954 432.5C156.344 435.289 152.493 438.033 147.911 441.059C143.435 444.014 138.289 447.22 133.571 450.762C128.833 454.319 124.3 458.374 120.99 463.202C117.646 468.08 115.552 473.748 115.736 480.41C115.919 487.027 118.341 494.351 123.54 502.6L128.616 499.4ZM132.691 392.852C103.592 377.348 87.6027 364.518 80.5874 354.467C77.1114 349.487 76.0284 345.462 76.3193 342.288C76.6047 339.173 78.2615 336.355 81.3844 333.834L77.6156 329.166C73.5647 332.436 70.8129 336.627 70.3443 341.74C69.8812 346.794 71.6988 352.215 75.6673 357.901C83.5408 369.182 100.616 382.561 129.87 398.148L132.691 392.852ZM81.3844 333.834C91.9971 325.267 97.7711 317.702 100.577 310.613C103.406 303.464 103.078 297.14 102.16 291.423C101.731 288.747 101.08 285.735 100.655 283.331C100.199 280.748 99.8894 278.316 99.934 275.895C100.02 271.21 101.434 266.259 106.461 260.466L101.93 256.534C96.0083 263.356 94.0479 269.65 93.935 275.784C93.88 278.772 94.2644 281.643 94.7465 284.374C95.26 287.283 95.7905 289.597 96.2363 292.374C97.0697 297.567 97.2677 302.668 94.9975 308.405C92.7036 314.202 87.7529 320.983 77.6156 329.166L81.3844 333.834ZM106.461 260.466C124.398 239.802 129.116 222.314 124.873 207.015C120.709 192 108.125 180.04 93.7946 169.781C86.5752 164.613 78.7684 159.779 71.1307 155.148C63.4583 150.496 55.9913 146.069 49.295 141.637C42.5942 137.202 36.8267 132.865 32.5475 128.459C28.2597 124.045 25.679 119.778 24.9583 115.501L19.0417 116.499C20.0452 122.452 23.5233 127.78 28.2436 132.64C32.9725 137.508 39.1625 142.126 45.9834 146.64C52.8088 151.158 60.4275 155.675 68.0199 160.278C75.647 164.903 83.2838 169.635 90.302 174.66C104.447 184.786 115.513 195.715 119.091 208.619C122.591 221.239 119.146 236.698 101.93 256.534L106.461 260.466ZM24.9583 115.501C23.5055 106.882 25.732 99.9792 29.2822 93.439C31.0817 90.1242 33.1856 86.9651 35.3449 83.677C37.4743 80.4342 39.6558 77.0683 41.4291 73.5324C45.0369 66.3387 47.0238 58.2973 44.0125 48.4002C41.0617 38.7022 33.4152 27.5791 18.7185 13.8107L14.6164 18.1893C29.0069 31.6709 35.7701 41.9228 38.2723 50.1467C40.7139 58.1714 39.1972 64.5988 36.0658 70.8426C34.4695 74.0255 32.4724 77.1205 30.3296 80.3835C28.2165 83.6013 25.9544 86.993 24.0091 90.5766C20.0698 97.8333 17.2922 106.118 19.0417 116.499L24.9583 115.501Z'
          fill={pathColor}
        />
      </Svg> */}
      <Svg xmlns='http://www.w3.org/2000/svg' width='518' height='168' viewBox='0 0 518 168'>
        <Path
          ref={(ref) => (routeRef.current = ref)}
          d='M16.8114 109.599C7.97485 109.599 0.811401 116.762 0.811401 125.599C0.811401 134.435 7.97485 141.599 16.8114 141.599C25.648 141.599 32.8114 134.435 32.8114 125.599C32.8114 116.762 25.648 109.599 16.8114 109.599ZM122.311 130.802L119.664 129.391L122.311 130.802ZM186.311 79.021L183.977 80.9054L186.311 79.021ZM259.311 103.717L261.278 101.451L259.311 103.717ZM401.811 21.521L401.313 18.5627L401.811 21.521ZM501.811 0.188477C492.975 0.188477 485.811 7.35192 485.811 16.1885C485.811 25.025 492.975 32.1885 501.811 32.1885C510.648 32.1885 517.811 25.025 517.811 16.1885C517.811 7.35192 510.648 0.188477 501.811 0.188477ZM18.4112 128.137C26.0379 123.329 32.3224 121.4 37.567 121.255C42.7669 121.111 47.2116 122.714 51.2167 125.46C55.2714 128.24 58.8684 132.188 62.2511 136.694C65.6484 141.219 68.6693 146.079 71.7454 150.737C74.751 155.29 77.8423 159.703 81.2118 162.856C84.6168 166.042 88.6992 168.304 93.5959 167.72C98.3426 167.155 103.046 163.997 107.988 158.405C112.973 152.764 118.539 144.261 124.959 132.212L119.664 129.391C113.334 141.272 108.025 149.303 103.492 154.432C98.9164 159.609 95.4599 161.456 92.8863 161.762C90.4627 162.051 88.0646 161.051 85.3114 158.475C82.5227 155.865 79.778 152.014 76.7524 147.431C73.7973 142.956 70.5916 137.81 67.0494 133.092C63.4927 128.354 59.4374 123.821 54.6093 120.511C49.7315 117.167 44.0629 115.073 37.4015 115.257C30.7847 115.44 23.4599 117.862 15.2116 123.061L18.4112 128.137ZM124.959 132.212C140.464 103.113 153.293 87.1237 163.344 80.1083C168.325 76.6324 172.349 75.5494 175.524 75.8403C178.638 76.1257 181.456 77.7825 183.977 80.9054L188.646 77.1366C185.376 73.0857 181.184 70.3338 176.071 69.8653C171.018 69.4022 165.596 71.2198 159.91 75.1883C148.63 83.0618 135.251 100.137 119.664 129.391L124.959 132.212ZM183.977 80.9054C192.544 91.518 200.109 97.2921 207.199 100.098C214.348 102.927 220.672 102.599 226.388 101.681C229.065 101.252 232.076 100.601 234.481 100.176C237.063 99.7202 239.495 99.4104 241.917 99.455C246.602 99.5412 251.553 100.955 257.345 105.982L261.278 101.451C254.455 95.5293 248.161 93.5689 242.027 93.456C239.039 93.401 236.169 93.7854 233.438 94.2674C230.528 94.781 228.215 95.3114 225.437 95.7573C220.244 96.5907 215.143 96.7887 209.406 94.5185C203.61 92.2246 196.829 87.2739 188.646 77.1366L183.977 80.9054ZM257.345 105.982C278.01 123.919 295.498 128.637 310.796 124.394C325.811 120.23 337.772 107.646 348.03 93.3156C353.199 86.0962 358.033 78.2894 362.663 70.6517C367.315 62.9793 371.743 55.5123 376.175 48.816C380.61 42.1152 384.946 36.3477 389.352 32.0685C393.767 27.7807 398.034 25.2 402.31 24.4793L401.313 18.5627C395.359 19.5662 390.031 23.0443 385.172 27.7646C380.303 32.4935 375.686 38.6835 371.171 45.5044C366.654 52.3298 362.136 59.9485 357.533 67.5409C352.908 75.168 348.176 82.8048 343.152 89.823C333.026 103.968 322.096 115.034 309.193 118.612C296.572 122.112 281.113 118.667 261.278 101.451L257.345 105.982ZM402.31 24.4793C410.93 23.0265 417.832 25.253 424.372 28.8032C427.687 30.6027 430.846 32.7066 434.134 34.8659C437.377 36.9953 440.743 39.1767 444.279 40.9501C451.473 44.5579 459.514 46.5448 469.411 43.5335C479.109 40.5827 490.232 32.9362 504.001 18.2395L499.622 14.1374C486.14 28.5279 475.889 35.291 467.665 37.7933C459.64 40.2349 453.213 38.7182 446.969 35.5868C443.786 33.9905 440.691 31.9934 437.428 29.8506C434.21 27.7375 430.818 25.4754 427.235 23.5301C419.978 19.5908 411.693 16.8132 401.313 18.5627L402.31 24.4793Z'
          fill='black'
        />
      </Svg>
      <PointerSvg
        scale={pointerScale}
        color={pointerColor}
        style={{
          position: 'absolute',
          transform: [{ translateX: pointerPosition.x }, { translateY: pointerPosition.y }],
        }}
      />
    </>
  );
}

function PointerSvg({ scale, color, ...props }) {
  scale = scale < 0.1 ? 1 : scale;
  return (
    <Svg xmlns='http://www.w3.org/2000/svg' width={20 * scale} height={20 * scale} viewBox='0 0 20 20' {...props}>
      <Circle cx='10' cy='10' r='10' fill={color} />
    </Svg>
  );
}
